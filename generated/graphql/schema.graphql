### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AddConversationInputType {
  items: [ConversationItemInputType]
  title: String!
}

input AddCustomFieldInputType {
  description: String
  field: String!
  id: ID
  inputType: CustomFieldInputType
  title: String!
}

input AddCustomerInputType {
  email: String
  fullname: String
  password: String
  phoneNumber: String
  username: String
}

input AddFolderImageInputType {
  name: String!
  type: TypeFile
}

input AddMemberInputType {
  email: String
  fullname: String
  password: String
}

input AddPostOfUserAppInput {
  content: String
  description: String
  isDraft: Boolean
  keywordId: ID!
  outline: String
  projectId: ID!
  slug: String
  title: String
  url: String
  userId: ID!
  workspaceId: ID!
}

input AddRootAdminInputType {
  email: String
  fullname: String
  password: String
  username: String
}

input AddServiceCategoryInputType {
  description: String
  title: String
}

input AddUserAdminInputType {
  email: String
  fullname: String
  password: String
  username: String
}

type AiSettingApp {
  createdAt: DateTime
  id: ID
  leadingSentence: String
  max_tokens: Int
  type: TypeAiSettingApp
}

type BuyWord {
  confirmBy: User
  confirmById: ID
  createdAt: DateTime
  createdBy: User
  createdById: ID
  id: ID
  isCancel: Boolean
  isConfirm: Boolean
  numberWord: Int
  price: Int
  transactionType: TransactionType
  workspace: Workspace
  workspaceId: ID
}

type BuyWordsResponseData {
  data: [BuyWord]
  pagination: PaginationType
}

input ChangeDefaultProjectInputType {
  default: Boolean
  id: ID
}

input ChangeEmailUserInputType {
  email: String
  newEmail: String
}

input ChangeExpiredTimeWorkspaceInputType {
  expiredAt: DateTime!
  workspaceId: ID!
}

input ChangePasswordUserInputType {
  email: String
  newPassword: String
  password: String
}

enum ChannelType {
  Facebook
  Wordpress
  Zalo
}

type Code {
  code: String
  createdAt: DateTime
  email: String
  id: ID
  isExpired: Boolean
}

input ConfirmRequestBuyWordInputType {
  buyWordId: ID
  isConfirm: Boolean
}

type Content {
  content: String
  createdAt: DateTime
  createdBy: User
  createdById: ID
  id: ID
  link: String
  service: Service
  serviceId: ID
  title: String
}

enum ContentTypeEnum {
  content
  document
}

input ContentsInputType {
  page: Int
  perPage: Int
  search: String
}

type ContentsResponseType {
  data: [Content]
  pagination: PaginationType
}

type Conversation {
  createdAt: DateTime
  createdBy: User
  doc: Image
  docId: ID
  id: ID
  projectId: ID
  title: String
  type: ConversationType
}

type ConversationItem {
  createdAt: DateTime
  createdBy: User
  createdById: ID
  id: ID
  message: String
}

input ConversationItemInputType {
  conversationId: ID
  createdById: ID
  message: String!
}

enum ConversationType {
  Chat
  Research
}

input ConversationsInputType {
  page: Int
  perPage: Int
  type: ConversationType
}

type ConversationsRepsonse {
  data: [Conversation]
  pagination: PaginationType
}

input CreateAiSettingAppInputType {
  id: ID
  leadingSentence: String
  max_tokens: Int
  type: TypeAiSettingApp
}

input CreatePaymentHistoryInputType {
  packageItemId: String!
  transactionType: TransactionType!
}

type CustomField {
  active: Boolean
  createdAt: DateTime
  description: String
  field: String
  id: ID
  inputType: CustomFieldInputType
  isDelete: Boolean
  title: String
}

enum CustomFieldInputType {
  Input
  Language
  StyleContent
  Textarea
}

input DataServiceInputType {
  categoryId: ID
  description: String
  leadingLanguage: String
  leadingSentence: String
  leadingStyleContent: String
  model: ModelAi
  systemMessage: String
  title: String
}

input DataTeamInputType {
  name: String
}

input DataUpdateUserInputType {
  fullname: String
  phoneNumber: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Document {
  content: String
  createdAt: DateTime
  createdBy: User
  createdById: ID
  description: String
  draftId: ID
  hasDraft: Boolean
  id: ID
  isDraft: Boolean
  keyword: Keyword
  keywordId: ID
  outline: String
  parentId: ID
  project: Project
  projectId: ID
  slug: String
  title: String
  url: String
  userId: ID
}

input DocumentDataInputType {
  content: String
  description: String
  isDraft: Boolean
  keywordId: ID!
  outline: String
  slug: String
  title: String
  url: String
}

input DocumentsInputType {
  page: Int
  perPage: Int
  projectId: ID
  search: String
}

type DocumentsResponseType {
  data: [Document]
  pagination: PaginationType
}

type EmailSignup {
  createdAt: DateTime
  email: String
  id: ID
}

type FolderImage {
  createdAt: DateTime
  description: String
  id: ID
  isPublic: Boolean
  name: String
  project: Project
  projectId: ID
  slug: String
  totalImage: Int
  type: TypeFile
}

input FolderImagesInputType {
  page: Int
  perPage: Int
  projectId: ID
  search: String
  type: TypeFile
}

type FolderImagesResponse {
  data: [FolderImage]
  pagination: PaginationType
}

input ForgotPasswordInputType {
  email: String
}

type GetTotalTokenDocResponseData {
  totalPrice: Float
  totalToken: Int
}

type Image {
  createdAt: DateTime
  description: String
  folder: FolderImage
  folderId: ID
  id: ID
  isEmbedded: Boolean
  isPublic: Boolean
  name: String
  project: Project
  projectId: ID
  src: String
  type: TypeFile
  url: String
}

input ImagesInputType {
  folderId: ID
  page: Int
  perPage: Int
  projectId: ID
  search: String
  type: TypeFile
}

type ImagesResponse {
  data: [Image]
  pagination: PaginationType
}

type Keyword {
  createdAt: DateTime
  description: String
  id: ID
  parentId: ID
  parentKeyword: Keyword
  projectId: ID
  subKeywords: [Keyword]
  value: String
}

input KeywordDataInputType {
  parentId: ID
  value: String!
}

input KeywordsInputType {
  page: Int
  perPage: Int
  search: String
}

input KeywordsOfUserAppInput {
  page: Int
  perPage: Int
  projectId: ID
}

type KeywordsOfUserAppResponse {
  data: [Keyword]
  pagination: PaginationType
}

type KeywordsResponse {
  data: [Keyword]
  pagination: PaginationType
}

type Language {
  createdAt: DateTime
  createdBy: User
  createdById: ID
  id: ID
  isDefault: Boolean
  label: String
  value: String
}

input ListBuyWordAdminInputType {
  page: Int
  perPage: Int
}

input ListMessageConversationInputType {
  conversationId: ID
  page: Int
  perPage: Int
}

type ListMessageConversationResponse {
  data: [ConversationItem]
  pagination: PaginationType
}

input LoginAppInput {
  password: String
  username: String
}

input LoginInputType {
  password: String
  username: String
}

enum ModelAi {
  Davinci
  GPT
  GPT4
}

type Mutation {
  addConversation(input: AddConversationInputType): Conversation
  addCustomField(input: AddCustomFieldInputType): CustomField
  addCustomer(input: AddCustomerInputType): User
  addFolderImage(input: AddFolderImageInputType): FolderImage
  addKeyword(input: KeywordDataInputType): Keyword
  addMember(input: AddMemberInputType): User
  addMessageInConversation(input: ConversationItemInputType): ConversationItem
  addPostOfUserApp(input: AddPostOfUserAppInput): Document
  addProject(input: ProjectDataInputType): Project
  addRootAdmin(input: AddRootAdminInputType): User
  addService(input: DataServiceInputType): Service
  addServiceCategory(input: AddServiceCategoryInputType): ServiceCategory
  addTeam(input: DataTeamInputType): Team
  addUserAdmin(input: AddUserAdminInputType): User
  addWpPost: Boolean
  cancelPaymentHistory(id: ID!): PaymentHistory
  changeDefaultProject(input: ChangeDefaultProjectInputType): Project
  changeDefaultProjectUser(projectId: ID!): Project
  changeDefaultTeam(teamId: ID): User
  changeEmail(input: ChangeEmailUserInputType): Boolean
  changeExpiredTimeWorkspace(input: ChangeExpiredTimeWorkspaceInputType): Workspace
  changePassword(input: ChangePasswordUserInputType): Boolean
  confirmPaymentHistory(id: ID!): PaymentHistory
  confirmPaymentHistory1(id: ID!): PaymentHistory
  confirmRequestBuyWord(input: ConfirmRequestBuyWordInputType): Boolean
  connectFacebookPage: Boolean
  createAiSettingApp(input: CreateAiSettingAppInputType): AiSettingApp
  createCode: [Int]
  createDocument(input: DocumentDataInputType): Document
  createPaymentHistory(input: CreatePaymentHistoryInputType): Boolean
  createTableSupabase: Boolean
  deleteContent(id: ID!): Boolean
  deleteConversation(conversationId: ID): Boolean
  deleteCustomField(id: ID!): Boolean
  deleteDocument(id: String!): Boolean
  deleteFolderImage(id: ID!): Boolean
  deleteImage(id: String): Boolean
  deleteKeyword(id: String!): Boolean
  deleteLanguage(id: ID!): Boolean
  deleteMember(memberId: ID!): Boolean
  deleteMessageInConversation(messageId: ID!): Boolean
  deletePageChannel(id: ID): Boolean
  deletePaymentHistory(id: ID!): Boolean
  deletePostOfUserApp(postId: ID!, userId: ID!): Boolean
  deleteProject(id: String!): Boolean
  deleteService(id: String!): Boolean
  deleteServiceCategory(id: String!): Boolean
  deleteStyleContent(id: ID!): Boolean
  deleteTeam(teamId: ID!): Boolean
  embeddedDocument(documentId: ID): Boolean
  embeddedDocument1(documentId: ID): Boolean
  embeddedDocument3(documentId: ID): Boolean
  forgotPassword(input: ForgotPasswordInputType): Boolean
  generateImageWithReplicate(prompt: String): String
  getTotalTokenDoc(url: String): GetTotalTokenDocResponseData
  login(input: LoginInputType): User
  loginApp(input: LoginAppInput): User
  logout: Boolean
  payContentAI(content: String): Boolean
  payRequestAiContent(content: String, token: Int): Int
  reSearchDocument(input: ReSearchDocumentInputType): String
  requestBuyWord(input: RequestBuyWordInputType): BuyWord
  resetPassword(input: ResetPasswordInputType): Boolean
  saveDraftDocument(input: UpdateDocumentInputType): Document
  signUp(input: SignupInputType): User
  signUpWithCode(input: SignupWithCodeInputType): User
  signupVerify(email: String!): Boolean
  signupVerify1(email: String!): Boolean
  syncContentPageChannel(input: SyncContentPageChannelInputType): Boolean
  testSendEmail(email: String): String
  updateContent(input: UpdateContentInputType): Content
  updateConversation(input: UpdateConversationInputType): Conversation
  updateDocument(input: UpdateDocumentInputType): Document
  updateFolderImage(input: UpdateFolderImageInputType): FolderImage
  updateImage(input: UpdateImageInputType): Image
  updateKeyword(input: UpdateKeywordInputType): Keyword
  updateLanguage(input: UpdateLanguageInputType): Language
  updatePackage(input: UpdatePackageInputType): Package
  updatePackageItem(input: UpdatePackageItemInputType): PackageItem
  updatePackagePeriod(input: UpdatePackagePeriodInputType): PackagePeriod
  updatePageChannel(input: UpdatePageChannelInputType): PageChannel
  updateProject(input: UpdateProjectInputType): Project
  updateService(input: UpdateServiceInputType): Service
  updateServiceCategory(input: UpdateServiceCategoryInputType): ServiceCategory
  updateSetting(input: UpdateSettingInputType): Setting
  updateStyleContent(input: UpdateStyleContentInputType): StyleContent
  updateTeam(input: UpdateTeamInputType): Team
  updateTimeUseGpt4(workspacePackageId: ID): WorkspacePackage
  updateUser(input: UpdateUserInputType): User
  updateWorkspace(input: UpdateWorkspaceInputType): Workspace
  updateWorkspaceAdmin(input: UpdateWorkspaceAdminInputType): Workspace
}

type Package {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  isShow: Boolean
  name: String
  packageItems: [PackageItem]
  type: PackageType
}

type PackageItem {
  content: String
  createdAt: DateTime
  freeTime: Int
  id: ID
  isActive: Boolean
  numberWord: Int
  packageParent: Package
  packageParentId: ID
  packagePeriod: PackagePeriod
  packagePeriodId: ID
  price: Int
}

type PackagePeriod {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  order: Int
  time: Int
}

enum PackageType {
  Basic
  Premium
  Trial
}

type PageChannel {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  pageChannelId: String
  password: String
  token: String
  type: ChannelType
  url: String
  username: String
}

input PageChannelsInputType {
  isActive: Boolean
  isAll: Boolean
  page: Int
  perPage: Int
  type: ChannelType
}

type PageChannelsResponseData {
  data: [PageChannel]
  pagination: PaginationType
}

type PaginationType {
  page: Int
  perPage: Int
  total: Int
}

input PaymentHistoriesAdminInputType {
  isConfirm: Boolean
  page: Int
  perPage: Int
}

input PaymentHistoriesInputType {
  isConfirm: Boolean
  page: Int
  perPage: Int
}

type PaymentHistoriesResponse {
  data: [PaymentHistory]
  pagination: PaginationType
}

type PaymentHistory {
  amount: Int
  cancelBy: User
  cancelById: ID!
  confirmAt: String
  confirmBy: User
  confirmById: ID
  createdAt: DateTime
  createdBy: User
  createdById: ID
  id: ID
  isCancel: Boolean
  isConfirm: Boolean
  packageItem: PackageItem
  packageItemId: ID
  transactionType: TransactionType
  workspaceId: ID
}

type Pexels {
  alt: String
  avg_color: String
  id: Int
  src: String
}

input PexelsPhotosInputType {
  page: Int
  perPage: Int
  search: String
}

type PexelsPhotosResponseData {
  data: [Pexels]
  pagination: PaginationType
}

input PostOfProjectAppInput {
  page: Int
  perPage: Int
  projectId: ID!
  workspaceId: ID!
}

type PostOfUserAppResponse {
  data: [Document]
  pagination: PaginationType
}

type PricingResponse {
  packages: [Package]
  periods: [PackagePeriod]
}

type Project {
  active: Boolean
  createdAt: DateTime
  default: Boolean
  description: String
  id: ID
  name: String
  teamId: String
  url: String
  userId: String
}

input ProjectDataInputType {
  description: String
  name: String!
  url: String
}

input ProjectOfUserAppInput {
  page: Int
  perPage: Int
  teamId: ID!
}

type ProjectOfUserAppResponse {
  data: [Project]
  pagination: PaginationType
}

input ProjectsInputType {
  page: Int
  perPage: Int
  search: String
}

type ProjectsResponseType {
  data: [Project]
  pagination: PaginationType
}

type Query {
  aiSettingApps: [AiSettingApp]
  code(code: String!): Code
  content(id: ID!): Content
  contents(input: ContentsInputType): ContentsResponseType
  conversation(conversationId: ID): Conversation
  conversationDefault(projectId: ID): Conversation
  conversations(input: ConversationsInputType): ConversationsRepsonse
  customFields: [CustomField]
  document(id: String!, isDraft: Boolean): Document
  documents(input: DocumentsInputType): DocumentsResponseType
  folderImage(id: String): FolderImage
  folderImages(input: FolderImagesInputType): FolderImagesResponse
  getEmailSignup(token: String): EmailSignup
  image(id: String): Image
  images(input: ImagesInputType): ImagesResponse
  keyword(id: String): Keyword
  keywords(input: KeywordsInputType): KeywordsResponse
  keywordsOfUserApp(input: KeywordsOfUserAppInput): KeywordsOfUserAppResponse
  languages: [Language]
  listBuyWordAdmin(input: ListBuyWordAdminInputType): BuyWordsResponseData
  listMessageConversation(input: ListMessageConversationInputType): ListMessageConversationResponse
  me: User
  packagePeriods(isActive: Boolean): [PackagePeriod]
  packages: [Package]
  pageChannels(input: PageChannelsInputType): PageChannelsResponseData
  paymentHistoriesAdmin(input: PaymentHistoriesAdminInputType): PaymentHistoriesResponse
  paymentHistoriesUser(input: PaymentHistoriesInputType): PaymentHistoriesResponse
  pexelsPhotos(input: PexelsPhotosInputType): PexelsPhotosResponseData
  postOfUserApp(postId: ID): Document
  postsOfUserApp(input: PostOfProjectAppInput): PostOfUserAppResponse
  pricing: PricingResponse
  project(id: String!): Project
  projectDefault: Project
  projectOfUserApp(input: ProjectOfUserAppInput): ProjectOfUserAppResponse
  projects(input: ProjectsInputType): ProjectsResponseType
  requestHistories(input: RequestHistoriesInputType): RequestHistoriesResponseData
  researchDocument1(question: String): String
  service(id: String!): Service
  serviceCategories(input: ServiceCategoriesInputType): ServiceCategoriesResponseType
  serviceCategoriesCustomer(search: String): [ServiceCategory]
  serviceCategory(id: String!): ServiceCategory
  services(input: ServicesInputType): ServicesResponseType
  servicesDashboard(input: ServicesInputType): ServicesResponseType
  setting: Setting
  styleContents: [StyleContent]
  subKeywords(input: SubKeywordsInputType): KeywordsResponse
  team(id: String!): Team
  teamDefault: Team
  teams: [Team]
  testSupabase: Boolean
  user(userId: String): User
  userInfoApp(userId: ID): User
  users(input: UsersInputType): UsersDataResponse
  workspace(id: String): Workspace
  workspacePackage(id: ID): WorkspacePackage
  workspaces: [Workspace]
  wpPosts: String
}

input ReSearchDocumentInputType {
  documentId: ID
  question: String
}

input RequestBuyWordInputType {
  numberWord: Int!
  price: Int!
  transactionType: TransactionType!
}

input RequestHistoriesInputType {
  page: Int
  perPage: Int
}

type RequestHistoriesResponseData {
  data: [RequestHistory]
  pagination: PaginationType
}

type RequestHistory {
  createdAt: DateTime
  id: ID
  price: Float
  project: Project
  projectId: ID
  tokens: Int
  user: User
  userId: ID
  workspace: Workspace
  workspaceId: ID
}

input ResetPasswordInputType {
  code: String
  password: String
}

type Service {
  category: ServiceCategory
  categoryId: String
  createdAt: DateTime
  customFieldIds: [String]
  customFields: [CustomField]
  description: String
  id: ID
  isDelete: Boolean
  leadingLanguage: String
  leadingSentence: String
  leadingStyleContent: String
  model: ModelAi
  slug: String
  systemMessage: String
  title: String
}

input ServiceCategoriesInputType {
  page: Int
  perPage: Int
  search: String
}

type ServiceCategoriesResponseType {
  data: [ServiceCategory]
  pagination: PaginationType
}

type ServiceCategory {
  createdAt: DateTime
  description: String
  id: ID
  order: Int
  services: [Service]
  slug: String
  title: String
}

input ServicesInputType {
  categoryId: String
  page: Int
  perPage: Int
  search: String
}

type ServicesResponseType {
  data: [Service]
  pagination: PaginationType
}

type Setting {
  bonusBalanceSignup: Float
  createdAt: DateTime
  documentLink: String
  fieldDescription: String
  fieldLanguage: String
  fieldMainKeyword: String
  fieldParagraph: String
  fieldStyleContent: String
  fieldSubKeyword: String
  fieldTitle: String
  id: ID
  numberOfTimeUseGpt4: Int
  priceToken: Float
  timeTrial: Int
}

input SignupInputType {
  email: String!
  fullname: String
  password: String!
  phoneNumber: String!
  username: String!
}

input SignupWithCodeInputType {
  code: String!
  fullname: String
  password: String!
  phoneNumber: String!
  username: String!
}

type StyleContent {
  createdAt: DateTime
  createdBy: User
  createdById: ID
  id: ID
  label: String
  value: String
}

input SubKeywordsInputType {
  parentId: ID!
  query: KeywordsInputType
}

input SyncContentPageChannelInputType {
  channelType: ChannelType
  content: String!
  contentId: ID!
  contentType: ContentTypeEnum
  pageIds: [String]
}

type Team {
  active: Boolean
  createdAt: DateTime
  default: Boolean
  id: ID
  memberIds: [String]
  members: [User]
  name: String
  ownerId: ID
}

enum TransactionType {
  TransferPayment
}

"""Type ai setting document generate"""
enum TypeAiSettingApp {
  Content
  Description
  Insert
  Outline
  Rewrite
  Title
  Write
}

enum TypeFile {
  Document
  Image
}

input UpdateContentInputType {
  content: String
  id: ID
  link: String
  serviceId: ID
  title: String
}

input UpdateConversationInputType {
  id: ID!
  title: String!
}

input UpdateDocumentInputType {
  data: DocumentDataInputType
  id: ID
}

input UpdateFolderImageInputType {
  description: String
  id: ID
  name: String
}

input UpdateImageInputType {
  description: String
  id: ID
  name: String
}

input UpdateKeywordDataInputType {
  value: String
}

input UpdateKeywordInputType {
  data: UpdateKeywordDataInputType
  id: ID!
}

input UpdateLanguageInputType {
  id: ID
  isDefault: Boolean
  label: String
  value: String
}

input UpdatePackageInputType {
  id: ID
  isActive: Boolean
  isShow: Boolean
  name: String
  type: PackageType
}

input UpdatePackageItemInputType {
  content: String
  freeTime: Int
  id: ID
  isActive: Boolean
  numberWord: Int
  packageParentId: ID
  packagePeriodId: ID
  price: Int
}

input UpdatePackagePeriodInputType {
  id: ID
  isActive: Boolean
  name: String
  order: Int
  time: Int
}

input UpdatePageChannelInputType {
  id: ID
  isActive: Boolean
  name: String
  password: String
  type: ChannelType
  url: String
  username: String
}

input UpdateProjectInputType {
  data: ProjectDataInputType
  id: ID
}

input UpdateServiceCategoryInputType {
  data: AddServiceCategoryInputType
  id: ID!
  order: Int
}

input UpdateServiceInputType {
  data: DataServiceInputType
  id: ID
}

input UpdateSettingInputType {
  bonusBalanceSignup: Float
  documentLink: String
  fieldDescription: String
  fieldLanguage: String
  fieldMainKeyword: String
  fieldParagraph: String
  fieldStyleContent: String
  fieldSubKeyword: String
  fieldTitle: String
  id: ID
  numberOfTimeUseGpt4: Int
  priceToken: Float
  timeTrial: Int
}

input UpdateStyleContentInputType {
  id: ID
  label: String
  value: String
}

input UpdateTeamInputType {
  data: DataTeamInputType
  id: ID
}

input UpdateUserInputType {
  data: DataUpdateUserInputType
}

input UpdateWorkspaceAdminInputType {
  balance: Float
  id: ID!
  isTrial: Boolean
}

input UpdateWorkspaceInputType {
  description: String
  id: ID
  name: String
}

type User {
  active: Boolean
  createdAt: DateTime
  defaultProject: Project
  defaultProjectId: ID
  defaultTeamId: ID
  email: String!
  fullname: String
  id: ID!
  isDeveloper: Boolean
  isVerify: Boolean
  password: String
  phoneNumber: String
  role: UserRole
  username: String!
  workspace: Workspace
  workspaceId: ID
}

"""Role of user"""
enum UserRole {
  Admin
  AdminStaff
  RootAdmin
  Staff
  User
}

type UsersDataResponse {
  data: [User]
  pagination: PaginationType
}

input UsersInputType {
  page: Int
  perPage: Int
  search: String
}

type Workspace {
  balance: Float
  bucket: String
  bucketSize: Int
  createdAt: DateTime
  description: String
  expiredAt: DateTime
  id: ID
  isOwner: Boolean
  isTrial: Boolean
  name: String
  owner: User
  ownerId: ID
  timeTrial: Int
  workspacePackage: WorkspacePackage
}

type WorkspacePackage {
  createdAt: DateTime
  freeTime: Int
  id: ID
  isActive: Boolean
  numberWord: Int
  packageItem: PackageItem
  packageItemId: ID
  startDateWord: DateTime
  time: Int
  timeUseGpt4: Int
}