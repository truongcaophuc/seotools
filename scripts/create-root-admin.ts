import { PrismaClient, Role } from '@prisma/client';
import { generalPasswordHash } from '../share/helps/password';

const prisma = new PrismaClient();

async function createRootAdmin() {
    try {
        // Ki·ªÉm tra xem ƒë√£ c√≥ RootAdmin ch∆∞a
        const existingRootAdmin = await prisma.user.findFirst({
            where: {
                role: Role.RootAdmin
            }
        });

        if (existingRootAdmin) {
            console.log('RootAdmin ƒë√£ t·ªìn t·∫°i:', existingRootAdmin.email);
            return;
        }

        // T·∫°o password hash
        const password = 'admin123'; // Thay ƒë·ªïi password n√†y
        const passwordHash = await generalPasswordHash(password);

        // T·∫°o RootAdmin user
        const rootAdmin = await prisma.user.create({
            data: {
                email: 'admin@example.com', // Thay ƒë·ªïi email n√†y
                username: 'rootadmin',
                password: passwordHash,
                fullname: 'Root Administrator',
                role: Role.RootAdmin,
                active: true,
                isVerify: true
            }
        });

        // T·∫°o workspace cho RootAdmin
        const workspace = await prisma.workspace.create({
            data: {
                name: 'Admin Workspace',
                description: 'Workspace c·ªßa Root Administrator',
                ownerId: rootAdmin.id,
                balance: 1000000 // S·ªë d∆∞ l·ªõn cho admin
            }
        });

        // T·∫°o team m·∫∑c ƒë·ªãnh
        const team = await prisma.team.create({
            data: {
                name: 'Admin Team',
                ownerId: rootAdmin.id,
                default: true,
                memberIds: [rootAdmin.id],
                workspaceId: workspace.id
            }
        });

        // T·∫°o project m·∫∑c ƒë·ªãnh
        const project = await prisma.project.create({
            data: {
                name: 'Admin Project',
                teamId: team.id,
                workspaceId: workspace.id,
                default: true
            }
        });

        // C·∫≠p nh·∫≠t user v·ªõi workspace, team v√† project m·∫∑c ƒë·ªãnh
        await prisma.user.update({
            where: { id: rootAdmin.id },
            data: {
                workspaceId: workspace.id,
                defaultTeamId: team.id,
                defaultProjectId: project.id
            }
        });

        console.log('‚úÖ RootAdmin ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
        console.log('üìß Email:', rootAdmin.email);
        console.log('üë§ Username:', rootAdmin.username);
        console.log('üîë Password:', password);
        console.log('‚ö†Ô∏è  H√£y thay ƒë·ªïi password sau khi ƒëƒÉng nh·∫≠p!');

    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o RootAdmin:', error);
    } finally {
        await prisma.$disconnect();
    }
}

createRootAdmin();