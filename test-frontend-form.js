const puppeteer = require('puppeteer');

// Test frontend login form behavior
async function testFrontendForm() {
    console.log('=== TEST FRONTEND LOGIN FORM ===\n');
    
    let browser;
    let page;
    
    try {
        // Launch browser
        console.log('1. Kh·ªüi ƒë·ªông tr√¨nh duy·ªát...');
        browser = await puppeteer.launch({
            headless: false, // Show browser for debugging
            devtools: true,  // Open DevTools
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        page = await browser.newPage();
        
        // Enable console logging
        page.on('console', msg => {
            console.log(`   [BROWSER CONSOLE] ${msg.type()}: ${msg.text()}`);
        });
        
        // Enable error logging
        page.on('pageerror', error => {
            console.log(`   [BROWSER ERROR] ${error.message}`);
        });
        
        // Enable request/response logging
        page.on('request', request => {
            if (request.url().includes('/api') || request.url().includes('login')) {
                console.log(`   [REQUEST] ${request.method()} ${request.url()}`);
            }
        });
        
        page.on('response', response => {
            if (response.url().includes('/api') || response.url().includes('login')) {
                console.log(`   [RESPONSE] ${response.status()} ${response.url()}`);
            }
        });
        
        console.log('   ‚úÖ Tr√¨nh duy·ªát ƒë√£ kh·ªüi ƒë·ªông');
        
    } catch (error) {
        console.log('   ‚ùå L·ªói kh·ªüi ƒë·ªông tr√¨nh duy·ªát:', error.message);
        return;
    }
    
    try {
        // Navigate to login page
        console.log('\n2. Truy c·∫≠p trang ƒëƒÉng nh·∫≠p...');
        await page.goto('http://localhost:3000/login', { 
            waitUntil: 'networkidle2',
            timeout: 10000
        });
        
        console.log('   ‚úÖ Trang ƒëƒÉng nh·∫≠p ƒë√£ t·∫£i');
        
        // Wait for form to be ready
        await page.waitForSelector('form', { timeout: 5000 });
        console.log('   ‚úÖ Form ƒëƒÉng nh·∫≠p ƒë√£ xu·∫•t hi·ªán');
        
    } catch (error) {
        console.log('   ‚ùå L·ªói t·∫£i trang ƒëƒÉng nh·∫≠p:', error.message);
        await browser.close();
        return;
    }
    
    try {
        // Check form elements
        console.log('\n3. Ki·ªÉm tra c√°c element c·ªßa form...');
        
        const usernameInput = await page.$('input[name="username"], input[type="email"], input[placeholder*="email"], input[placeholder*="username"]');
        const passwordInput = await page.$('input[name="password"], input[type="password"]');
        const submitButton = await page.$('button[type="submit"], button:contains("ƒêƒÉng nh·∫≠p"), button:contains("Login")');
        
        if (usernameInput) {
            console.log('   ‚úÖ T√¨m th·∫•y input username/email');
        } else {
            console.log('   ‚ùå Kh√¥ng t√¨m th·∫•y input username/email');
        }
        
        if (passwordInput) {
            console.log('   ‚úÖ T√¨m th·∫•y input password');
        } else {
            console.log('   ‚ùå Kh√¥ng t√¨m th·∫•y input password');
        }
        
        if (submitButton) {
            console.log('   ‚úÖ T√¨m th·∫•y button submit');
        } else {
            console.log('   ‚ùå Kh√¥ng t√¨m th·∫•y button submit');
        }
        
        if (!usernameInput || !passwordInput || !submitButton) {
            console.log('   ‚ùå Form kh√¥ng ƒë·∫ßy ƒë·ªß elements');
            await browser.close();
            return;
        }
        
    } catch (error) {
        console.log('   ‚ùå L·ªói ki·ªÉm tra form elements:', error.message);
        await browser.close();
        return;
    }
    
    try {
        // Fill and submit form
        console.log('\n4. ƒêi·ªÅn th√¥ng tin v√† submit form...');
        
        // Clear and fill username
        await page.focus('input[name="username"], input[type="email"], input[placeholder*="email"], input[placeholder*="username"]');
        await page.keyboard.down('Control');
        await page.keyboard.press('KeyA');
        await page.keyboard.up('Control');
        await page.type('input[name="username"], input[type="email"], input[placeholder*="email"], input[placeholder*="username"]', '21521300@gm.uit.edu.vn');
        
        console.log('   ‚úÖ ƒê√£ ƒëi·ªÅn username');
        
        // Clear and fill password
        await page.focus('input[name="password"], input[type="password"]');
        await page.keyboard.down('Control');
        await page.keyboard.press('KeyA');
        await page.keyboard.up('Control');
        await page.type('input[name="password"], input[type="password"]', 'cp31012003');
        
        console.log('   ‚úÖ ƒê√£ ƒëi·ªÅn password');
        
        // Wait a bit for any validation
        await page.waitForTimeout(1000);
        
        // Submit form
        console.log('   üîÑ ƒêang submit form...');
        await page.click('button[type="submit"], button:contains("ƒêƒÉng nh·∫≠p"), button:contains("Login")');
        
        // Wait for response
        await page.waitForTimeout(3000);
        
        // Check current URL
        const currentUrl = page.url();
        console.log(`   Current URL: ${currentUrl}`);
        
        if (currentUrl.includes('/login')) {
            console.log('   ‚ùå V·∫´n ·ªü trang login - ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
            
            // Check for error messages
            const errorMessages = await page.$$eval('[class*="error"], [class*="alert"], .text-red-500, .text-danger', elements => 
                elements.map(el => el.textContent.trim()).filter(text => text.length > 0)
            );
            
            if (errorMessages.length > 0) {
                console.log('   Th√¥ng b√°o l·ªói t√¨m th·∫•y:');
                errorMessages.forEach(msg => console.log(`     - ${msg}`));
            } else {
                console.log('   Kh√¥ng t√¨m th·∫•y th√¥ng b√°o l·ªói c·ª• th·ªÉ');
            }
            
        } else {
            console.log('   ‚úÖ ƒê√£ chuy·ªÉn h∆∞·ªõng - ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
        }
        
    } catch (error) {
        console.log('   ‚ùå L·ªói khi submit form:', error.message);
    }
    
    try {
        // Keep browser open for manual inspection
        console.log('\n5. Gi·ªØ tr√¨nh duy·ªát m·ªü ƒë·ªÉ ki·ªÉm tra th·ªß c√¥ng...');
        console.log('   B·∫°n c√≥ th·ªÉ ki·ªÉm tra Developer Tools ƒë·ªÉ xem chi ti·∫øt');
        console.log('   Nh·∫•n Enter ƒë·ªÉ ƒë√≥ng tr√¨nh duy·ªát...');
        
        // Wait for user input
        await new Promise(resolve => {
            process.stdin.once('data', () => resolve());
        });
        
    } catch (error) {
        console.log('   L·ªói:', error.message);
    } finally {
        if (browser) {
            await browser.close();
        }
    }
    
    console.log('\n=== K·∫æT LU·∫¨N ===');
    console.log('Script ƒë√£ ho√†n th√†nh. Ki·ªÉm tra logs ·ªü tr√™n ƒë·ªÉ xem chi ti·∫øt.');
}

// Check if puppeteer is available
try {
    require.resolve('puppeteer');
    testFrontendForm().catch(console.error);
} catch (error) {
    console.log('‚ùå Puppeteer ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t.');
    console.log('ƒê·ªÉ c√†i ƒë·∫∑t, ch·∫°y: npm install puppeteer');
    console.log();
    console.log('Ho·∫∑c b·∫°n c√≥ th·ªÉ ki·ªÉm tra th·ªß c√¥ng b·∫±ng c√°ch:');
    console.log('1. M·ªü http://localhost:3000/login trong tr√¨nh duy·ªát');
    console.log('2. M·ªü Developer Tools (F12)');
    console.log('3. V√†o tab Console v√† Network');
    console.log('4. Th·ª≠ ƒëƒÉng nh·∫≠p v·ªõi:');
    console.log('   - Username: 21521300@gm.uit.edu.vn');
    console.log('   - Password: cp31012003');
    console.log('5. Xem c√≥ l·ªói n√†o trong Console v√† Network tabs');
}